; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Time Keeper"
#define MyAppPublisher "Gary Haag"
#define MyAppExeName "Time Keeper.exe"
#define MyAppVersion GetFileVersion("C:\Users\ghaag\Programming\CSharp_Projects\Time Keeper\Time Keeper\bin\Release\Time Keeper.exe")
   
[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{A99AA952-7D70-4B2C-ABD2-6D31B0753197}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
CloseApplications=yes
DefaultDirName={commonpf32}\{#MyAppName}
DisableWelcomePage=no
DisableProgramGroupPage=yes
InfoBeforeFile=C:\Users\ghaag\Programming\CSharp_Projects\InfoBeforeFile.rtf
UsedUserAreasWarning=no
LicenseFile=C:\Users\ghaag\Programming\CSharp_Projects\CC-BY-NC-ND 4.0.rtf
PrivilegesRequired=admin
OutputDir=C:\Users\ghaag\Programming\CSharp_Projects\Installers
OutputBaseFilename=Time Keeper
SetupIconFile=C:\Users\ghaag\Programming\CSharp_Projects\Time Keeper\Time Keeper\timetable.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern

; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
; On all other architectures it will install in "32-bit mode".
ArchitecturesInstallIn64BitMode=x64

[Code]
function DotNETNotInstalled: Boolean;
  begin
    Result:= 
      not RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\.NETFramework\policy\v4.0');
  end;

procedure InstallDotNET;
  var StatusText: string;
  var ResultCode: Integer;
  begin
    StatusText := WizardForm.StatusLabel.Caption;
    WizardForm.StatusLabel.Caption := 'Installing .NET framework...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    try
       if not Exec(ExpandConstant('C:\ForceX\NDP461-KB3102438-Web.exe'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
        begin
          MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.',
          mbError, MB_OK);
        end;
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;
  end;

function SQLLocalDBNotInstalled: Boolean;
  begin
    Result :=
      not RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions\11.0');
  end;
  
procedure InstallSQLLocalDB;
  var StatusText: string;
  var ResultCode: Integer;
  begin
    StatusText := WizardForm.StatusLabel.Caption;
    WizardForm.StatusLabel.Caption := 'Installing SQL LocalDB 2012 framework...';
    WizardForm.ProgressGauge.Style := npbstMarquee;
    try
       if not Exec(ExpandConstant('C:\ForceX\SqlLocalDB 2012 (x64).exe'), '/i /qn IACCEPTSQLLOCALDBLICENSETERMS=YES', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
        begin
          MsgBox('SQL LocalDB installation failed with code: ' + IntToStr(ResultCode) + '.',
          mbError, MB_OK);
        end;
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;
  end;

function GetUninstallString: string;
var
  sUnInstPath: string;
  sUnInstallString: String;
begin
  Result := '';
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{{A99AA952-7D70-4B2C-ABD2-6D31B0753197}_is1'); 
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade: Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function InitializeSetup: Boolean;
var
  iResultCode: Integer;
  sUnInstallString: string;
begin
  Result := True; { in case when no previous version is found }
  if RegValueExists(HKEY_LOCAL_MACHINE,'Software\Microsoft\Windows\CurrentVersion\Uninstall\{A99AA952-7D70-4B2C-ABD2-6D31B0753197}_is1', 'UninstallString') then
  begin
    MsgBox('A Previous version of the application is installed, click OK to uninstall now.', mbInformation, MB_OK);
    begin
      sUnInstallString := GetUninstallString();
      sUnInstallString :=  RemoveQuotes(sUnInstallString);
      Exec(ExpandConstant(sUnInstallString), '', '', SW_SHOW, ewWaitUntilTerminated, iResultCode);
    end
  end;
end;

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode

[Files]
; 64-bit Files
Source: "..\..\packages\DotNET 4.6.1.exe"; DestDir: "C:\ForceX"; Flags: deleteafterinstall; Check: DotNETNotInstalled; AfterInstall: InstallDotNET
Source: "..\..\packages\SqlLocalDB 2012 (x64).exe"; DestDir: "C:\ForceX"; Flags: deleteafterinstall; Check: SQLLocalDBNotInstalled; AfterInstall: InstallSQLLocalDB

Source: "..\bin\Release\Time Keeper.exe"; DestDir: "{app}"; Flags: onlyifdoesntexist
Source: "..\bin\Release\Time Keeper.exe.config"; DestDir: "{app}"; Flags: onlyifdoesntexist
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon